集合：
    为了对多个对象进行操作，我们就必须把这多个对象存储。要想存储多个对象，就需要一个容器类型的变量。
    我们所学的里面有数组和StringBuffer。但是StringBuffer的结果是一个字符串 ，不一定满足需要。
    数组又不能适应变化的需求，因为数组的长度是固定的。所以，集合就出现了。
    
集合与数组的区别:
  A:长度
       数组固定，集合可变
  B:内容：
       数组存储的是同一类型的元素，而集合是不同类型
  C:数据类型
        数组可以存储基本类型和引用类型，而集合只能引用类型。
 
刚说过集合是存储多个元的，但是呢，存储多个元素我们也是有不同需求的：比如说，我要这多个元素中不能有相同的元素，
再比如说，我要这多个元素按照某种规则排序一下。针对不同的需求，Java就提供了不同的集合类，这样呢，Java就提供了很多个集合类。
这多个集合类的数据结构不同,结构不同不重要的，重要的是你要能够存储东西，并且还要能够使用这些东西，比如说判断，获取等。
既然这样，那么，这多个集合类是有共性的内容的，我们把这些集合类的共性内容不断的向上提取，最终就能形成集合的继承体系结构

Collection是集合的顶层接口，它的子体系有重复的，有唯一的，有有序的，有无序的。

Collection
			|--List
				|--ArrayList
				|--Vector
				|--LinkedList
			|--Set
				|--HashSet
				|--TreeSet


List:
  有序的collection，此接口可以对列表中的每个元素的插入位置精准的控制，可以根据元素的整数索引访问元素，列表通常允许有重复的元素
  特点：有序(存储顺序和取出顺序一致)，可重复。
 常见数据结构
		A:栈 先进后出
		B:队列 先进先出
		C:数组 查询快，增删慢
		D:链表 查询慢，增删快
		
List的子类特点:
    ArrayList:
              底层数据结构是数组，查询快，增删慢，线程不安全，效率高
    LinkedList:
              底层数据结构是链表，查询慢，增删快，线程不安全，效率高
     Vector:
              底层数据结构是数组，查询快，增删慢，线程安全，效率低
              
Set:
      无序(存储顺序和取出顺序不一致),唯一
    HashSet集合(掌握)
		A:底层数据结构是哈希表(是一个元素为链表的数组)
		B:哈希表底层依赖两个方法：hashCode()和equals()
		  执行顺序：
			首先比较哈希值是否相同
				相同：继续执行equals()方法
					返回true：元素重复了，不添加
					返回false：直接把元素添加到集合
				不同：就直接把元素添加到集合
		C:如何保证元素唯一性的呢?
			由hashCode()和equals()保证的
		D:开发的时候，代码非常的简单，自动生成即可。
		E:HashSet存储字符串并遍历
		F:HashSet存储自定义对象并遍历(对象的成员变量值相同即为同一个元素)
	TreeSet集合
		A:底层数据结构是红黑树(是一个自平衡的二叉树)
		B:保证元素的排序方式
			a:自然排序(元素具备比较性)
				让元素所属的类实现Comparable接口
			b:比较器排序(集合具备比较性)
				让集合构造方法接收Comparator的实现类对象
				
	**LinkedHashSet:底层数据结构由哈希表和链表组成。
  		哈希表保证元素的唯一性。
  		链表保证元素有素。(存储和取出是一致)

				
Collections(理解)	
	(1)是针对集合进行操作的工具类
	(2)面试题：Collection和Collections的区别
		A:Collection 是单列集合的顶层接口，有两个子接口List和Set
		B:Collections 是针对集合进行操作的工具类，可以对集合进行排序和查找等